import unittestfrom src.customer import Customerfrom src.data import dbfrom src.plan import SinglePlanfrom src.utilities.messages import messagesclass TestWebsites(unittest.TestCase):    """ Test class to test website implementation """    def setUp(self):        self.customer = Customer('faith', 'faith', 'faith@gmail.com')        self.customer2 = Customer('gani', 'pass', 'gani@gmail.com')        self.single = SinglePlan()    def test_to_add_new_website_successful(self):        """ Test adding new website to subscription succeeds"""        self.customer.customer_authentication(self.customer.password)        self.customer.subscribe(self.single)        url = 'mytestwebsite.com'        response = self.customer.add_new_website(url)        self.assertEqual(response.customer, self.customer)        self.assertEqual(db['subscriptions'][self.customer.email].websites[response.unique_key][0],                         response)        self.assertEqual(db['subscriptions'][self.customer.email].websites[response.unique_key][0].unique_key,                         response.unique_key)    def test_to_create_new_website_fail_with_no_auth(self):        """ Test adding new website to subscription fails with no authentication"""        with self.assertRaises(ValueError) as error:            self.customer.subscribe(self.single)            url = 'mytestwebsite.com'            self.customer.add_new_website(url)        self.assertEqual(messages['not_authenticated'], str(error.exception))    def test_to_edit_website_successful(self):        """ Test editing customer website succeeds"""        self.customer.customer_authentication(self.customer.password)        url = 'google.com'        website_object = db['subscriptions'][self.customer.email].websites        unique_key = [x for x in website_object.keys()][0]        action = 'update'        response = self.customer.manage_website(url, unique_key, action)        self.assertEqual(response.customer.name, self.customer.name)        self.assertEqual(db['subscriptions'][self.customer.email].websites[response.unique_key][0],                         response)        self.assertEqual(db['subscriptions'][self.customer.email].websites[response.unique_key][0].url,                         url)    def test_to_remove_website_successful(self):        """ Test deleting website by customer succeeds"""        self.customer.customer_authentication(self.customer.password)        website_object = db['subscriptions'][self.customer.email].websites        unique_key = [x for x in website_object.keys()][0]        action = 'delete'        response = self.customer.manage_website('', unique_key, action)        self.assertEqual(response, None)    def test_to_remove_website_fail_with_invalid_key(self):        """ Test deleting website by customer fails with invalid unique_key"""        self.customer.customer_authentication(self.customer.password)        unique_key = 'invalidkey$$'        action = 'delete'        with self.assertRaises(ValueError) as error:            self.customer.manage_website('', unique_key, action)        self.assertEqual(messages['not_found'], str(error.exception))    def test_to_list_all_customer_website(self):        """ Test list all customer website succeeds"""        self.customer.customer_authentication(self.customer.password)        action = 'list'        response = self.customer.manage_website(None, None, action)        self.assertIsInstance(response, list)    def test_create_website_limit_reach_fail(self):        """ Test creating website by customer failed if limit is reached"""        self.customer2.customer_authentication(self.customer2.password)        self.customer2.subscribe(self.single)        url = 'mytestwebsite.com'        self.customer2.add_new_website(url)        with self.assertRaises(ValueError) as error:            self.customer2.add_new_website(url)        self.assertEqual(f'Your plan can only allow 1 site(s)', str(error.exception))