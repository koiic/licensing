import unittestfrom datetime import datetime, timezonefrom src.customer import Customer, CustomerSubscriptionfrom src.data import dbfrom src.plan import SinglePlan, PlusPlan, InfinitePlanfrom src.utilities.messages import messagesclass TestCustomerSubcription(unittest.TestCase):    """ Test class to test everthing customer subscription"""    def setUp(self):        self.customer = Customer('test', 'test', 'test@gmail.com')        self.customer2 = Customer('plus', 'plus', 'plus@gmail.com')        self.customer3 = Customer('infinite', 'infinite', 'infinite@gmail.com')        self.single = SinglePlan()        self.plus = PlusPlan()        self.infinite = InfinitePlan()    def test_customer_single_plan_subscription_successful(self):        """ Test customer subscription for single plan"""        self.customer.customer_authentication(self.customer.password)        subscription = self.customer.subscribe(self.single)        self.assertEqual(subscription.plan.name, 'Single')        self.assertTrue(subscription.customer.auth)        self.assertEqual(str(subscription.get_sub_plan()), self.single.__repr__())    def test_single_plan_customer_subscription_fail_with_existing_subscription(self):        """ Test customer subscription for single plan failed """        self.customer.customer_authentication(self.customer.password)        with self.assertRaises(Exception) as error:            self.customer.subscribe(self.single)        self.assertEqual(messages['sub_exist'], str(error.exception))    def test_customer_plus_plan_subscription_successful(self):        """ Test customer subscription for plus plan"""        self.customer2.customer_authentication(self.customer2.password)        subscription = self.customer2.subscribe(self.plus)        self.assertEqual(subscription.plan.name, 'Plus')        self.assertTrue(subscription.customer.auth)        self.assertEqual(str(subscription.get_sub_plan()), self.plus.__repr__())    def test_plus_plan_customer_subscription_fail_with_existing_subscription(self):        """ Test customer subscription for plus plan failed with existing subscription"""        self.customer2.customer_authentication(self.customer2.password)        with self.assertRaises(Exception) as error:            self.customer2.subscribe(self.plus)        self.assertEqual(messages['sub_exist'], str(error.exception))    def test_customer_infinite_plan_subscription_successful(self):        """ Test customer subscription for infinite plan"""        self.customer3.customer_authentication(self.customer3.password)        subscription = self.customer3.subscribe(self.infinite)        self.assertEqual(subscription.plan.name, 'Infinite')        self.assertTrue(subscription.customer.auth)        self.assertEqual(str(subscription.get_sub_plan()), self.infinite.__repr__())    def test_infinite_plan_customer_subscription_fail_with_existing_subscription(self):        """ Test customer subscription for infinite plan subscription failed"""        self.customer3.customer_authentication(self.customer3.password)        with self.assertRaises(Exception) as error:            self.customer3.subscribe(self.infinite)        self.assertEqual(messages['sub_exist'], str(error.exception))    def test_customer_subscription_fails_with_no_auth(self):        """ Test customer subscription with no authentication failed"""        with self.assertRaises(ValueError) as error:            self.customer.subscribe(self.single)        self.assertEqual(messages['not_authenticated'], str(error.exception))    def test_save_new_subscription_successful(self):        """ Test saving new subscription"""        customer = Customer('freeuser', 'freepass', 'free@gmail.com')        subscription = CustomerSubscription(customer, self.infinite)        subscription.commit()        self.assertEqual(subscription.plan.name, 'Infinite')        self.assertEqual(db['subscriptions']['free@gmail.com'], subscription)    def test_check_valid_subscription_successful(self):        """ Test  if customer subscription is still valid"""        customer = Customer('PLUSuser', 'pass', 'PLUS@gmail.com')        subscription = CustomerSubscription(customer, self.plus)        subscription.commit()        self.assertTrue(datetime.now(timezone.utc) < subscription.get_sub_expiry_date)