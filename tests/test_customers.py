import unittestfrom src import mainfrom src.customer import Customerfrom src.data import dbfrom src.utilities.messages import messagesclass TestCustomers(unittest.TestCase):    def setUp(self):        self.customer = Customer('ismail', 'pass', 'ismail@gmail.com')    def test_customer_created_successfully(self):        """              Test that a customer is created successfully              :return:        """        self.assertEqual('ismail@gmail.com', self.customer.email)        self.assertEqual('ismail', self.customer.name)        self.assertEqual('pass', self.customer.password)    def test_customer_repr_method(self):        """        Test __repr__ method        :return:        """        self.assertEqual(f'<User ismail@gmail.com>', self.customer.__repr__())    def test_customer_authenticate_successfully(self):        """        test to authenticate user successfully        :return:        """        self.customer.customer_authentication('pass')        self.assertTrue(self.customer.auth)    def test_customer_authentication_fails(self):        """        test to authenticate customer fails        :return:        """        with self.assertRaises(ValueError) as error:            self.customer.customer_authentication('phish')        self.assertFalse(self.customer.auth)        self.assertEqual('The credential is invalid', str(error.exception))    def test_customer_registration_successful(self):        """ test customer registration successful"""        new_customer = main.customer_registration('bimbo', 'password!', 'bimb@gmail.com')        self.assertEqual(db['customers']['bimb@gmail.com'], new_customer)        self.assertIsInstance(new_customer, Customer)    def test_customer_registration_fails_with_existing_email(self):        """ Test customer registratio for existing email """        main.customer_registration('bimbo', 'password!', 'bimbo@gmail.com')        with self.assertRaises(ValueError) as error:            main.customer_registration('bimbo', 'password!', 'bimbo@gmail.com')        self.assertEqual(messages['already_exist'].format('Email'), str(error.exception))    def test_customer_signup_successfully(self):        """ Test customer login successfully"""        customer = main.sign_in_customer('bimbo@gmail.com', 'password!')        self.assertEqual(db['customers']['bimbo@gmail.com'], customer)        self.assertTrue(customer.auth)    def test_customer_signup_failed_with_invalid_credentials(self):        """ Test customer login successfully"""        with self.assertRaises(ValueError) as error:            main.sign_in_customer('invalid@gmail.com', 'password!')        self.assertEqual(messages['invalid_credentials'], str(error.exception))